networks:
  desafio_network:
    name: desafio_network

services:
  db:
    image: postgres:15
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_DB: powerplant_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - desafio_network  # Garante que o banco esteja na mesma rede
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d powerplant_db" ]
      interval: 10s
      retries: 5
      timeout: 5s

  app:
    build: .
    container_name: kotlin_spring_app
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/powerplant_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8080:8080"
    networks:
      - desafio_network  # Agora ambos os serviços estão na mesma rede

volumes:
  pgdata:

